package emi.indo.cordova.plugin.iap;import android.annotation.SuppressLint;import android.util.Log;import androidx.annotation.NonNull;import com.android.billingclient.api.AcknowledgePurchaseParams;import com.android.billingclient.api.BillingClient;import com.android.billingclient.api.BillingClientStateListener;import com.android.billingclient.api.BillingFlowParams;import com.android.billingclient.api.BillingResult;import com.android.billingclient.api.ConsumeParams;import com.android.billingclient.api.ProductDetails;import com.android.billingclient.api.Purchase;import com.android.billingclient.api.PurchaseHistoryRecord;import com.android.billingclient.api.QueryProductDetailsParams;import com.android.billingclient.api.QueryPurchaseHistoryParams;import com.android.billingclient.api.QueryPurchasesParams;import org.apache.cordova.CallbackContext;import org.apache.cordova.CordovaInterface;import org.apache.cordova.CordovaPlugin;import org.apache.cordova.CordovaWebView;import org.apache.cordova.PluginResult;import org.json.JSONArray;import org.json.JSONException;import java.util.ArrayList;import java.util.Objects;public class emiInAppPurchase extends CordovaPlugin{private final String TAG="emiInAppPurchase";private BillingClient billingClient;String ProductType;String ProductId;Boolean IsConsumable=false;String Position;String Title;String Description;private CallbackContext PUBLIC_CALLBACKS=null;public void initialize(CordovaInterface cordova,CordovaWebView webView){super.initialize(cordova,webView);}@SuppressLint("LongLogTag")@Override public boolean execute(@NonNull String action,JSONArray args,final CallbackContext callbackContext)throws JSONException{PUBLIC_CALLBACKS=callbackContext;if(action.equals("initialize")){billingClient=BillingClient.newBuilder(cordova.getActivity()).enablePendingPurchases().setListener((billingResult,list)->{if(billingResult.getResponseCode()==BillingClient.BillingResponseCode.OK&&list!=null){for(Purchase purchase:list){Log.d(TAG,"Response is OK");handlePurchaseNonConsumable(purchase,PUBLIC_CALLBACKS);}}else{Log.d(TAG,"Response NOT OK");errorCallBack(billingResult);}}).build();establishConnection(PUBLIC_CALLBACKS);return true;}if(action.equals("purchaseProducts")){final String productType=args.getString(0);final String productId=args.getString(1);final boolean isConsumable=args.getBoolean(2);final String title=args.getString(2);final String description=args.getString(3);try{this.ProductType=productType;this.ProductId=productId;this.IsConsumable=isConsumable;this.Title=title;this.Description=description;getProductType();purchaseNonConsumable();}catch(Exception e){PUBLIC_CALLBACKS.error(e.toString());}return true;}if(action.equals("restorePurchases")){final String productType=args.getString(0);final String position=args.getString(1);try{this.ProductType=productType;this.Position=position;restoreNonConsumable(PUBLIC_CALLBACKS);}catch(Exception e){PUBLIC_CALLBACKS.error(e.toString());}return true;}if(action.equals("getProductDetail")){final String productType=args.getString(0);final String productId=args.getString(1);final String position=args.getString(2);try{this.ProductType=productType;this.ProductId=productId;this.Position=position;getProductType();getProductDetail(PUBLIC_CALLBACKS);}catch(Exception e){PUBLIC_CALLBACKS.error(e.toString());}return true;}if(action.equals("getPurchaseHistory")){final String productType=args.getString(0);final String position=args.getString(1);try{this.ProductType=productType;this.Position=position;getProductType();getPurchaseHistory(PUBLIC_CALLBACKS);}catch(Exception e){PUBLIC_CALLBACKS.error(e.toString());}return true;}return false;}void getProductType(){if(Objects.equals(ProductType,"Non-consumable")){this.ProductType=BillingClient.ProductType.INAPP;}else if(Objects.equals(ProductType,"Subscriptions")){this.ProductType=BillingClient.ProductType.SUBS;}}void establishConnection(final CallbackContext PUBLIC_CALLBACKS){billingClient.startConnection(new BillingClientStateListener(){@SuppressLint("LongLogTag")@Override public void onBillingSetupFinished(@NonNull BillingResult billingResult){PluginResult result=new PluginResult(PluginResult.Status.OK,billingResult.getResponseCode());result.setKeepCallback(true);PUBLIC_CALLBACKS.sendPluginResult(result);}@SuppressLint("LongLogTag")@Override public void onBillingServiceDisconnected(){Log.d(TAG,"Connection NOT Established");establishConnection(PUBLIC_CALLBACKS);}});}void purchaseNonConsumable(){ArrayList<QueryProductDetailsParams.Product> productList=new ArrayList<>();productList.add(QueryProductDetailsParams.Product.newBuilder().setProductId(ProductId).setProductType(ProductType).build());QueryProductDetailsParams params=QueryProductDetailsParams.newBuilder().setProductList(productList).build();billingClient.queryProductDetailsAsync(params,(billingResult,list)-> LaunchPurchaseFlow(list.get(0)));}void LaunchPurchaseFlow(ProductDetails productDetails){if(Objects.equals(ProductType,"inapp")){ArrayList<BillingFlowParams.ProductDetailsParams> productList=new ArrayList<>();productList.add(BillingFlowParams.ProductDetailsParams.newBuilder().setProductDetails(productDetails).build());BillingFlowParams billingFlowParams=BillingFlowParams.newBuilder().setProductDetailsParamsList(productList).build();billingClient.launchBillingFlow(cordova.getActivity(),billingFlowParams);}else if(Objects.equals(ProductType,"subs")){ArrayList<BillingFlowParams.ProductDetailsParams> productList=new ArrayList<>();assert productDetails.getSubscriptionOfferDetails()!=null;productList.add(BillingFlowParams.ProductDetailsParams.newBuilder().setProductDetails(productDetails).setOfferToken(productDetails.getSubscriptionOfferDetails().get(0).getOfferToken()).build());BillingFlowParams billingFlowParams=BillingFlowParams.newBuilder().setProductDetailsParamsList(productList).build();billingClient.launchBillingFlow(cordova.getActivity(),billingFlowParams);}}private void handlePurchaseNonConsumable(Purchase purchases,final CallbackContext PUBLIC_CALLBACKS){if(!purchases.isAcknowledged()){billingClient.acknowledgePurchase(AcknowledgePurchaseParams .newBuilder().setPurchaseToken(purchases.getPurchaseToken()).build(),billingResult ->{try{if(billingResult.getResponseCode()==BillingClient.BillingResponseCode.OK){PUBLIC_CALLBACKS.success(0);for(String pur:purchases.getProducts()){if(pur.equalsIgnoreCase(ProductId)){if(IsConsumable){handlePurchaseConsumable(purchases);break;}}}}else{PUBLIC_CALLBACKS.success(billingResult.getResponseCode());}}catch(Exception e){PUBLIC_CALLBACKS.error(e.toString());}});}}void handlePurchaseConsumable(Purchase purchase){ConsumeParams params=ConsumeParams.newBuilder().setPurchaseToken(purchase.getPurchaseToken()).build();billingClient.consumeAsync(params,(billingResult,s)-> Log.d("TAG",s));}@SuppressLint("LongLogTag")void getProductDetail(final CallbackContext PUBLIC_CALLBACKS){ArrayList<QueryProductDetailsParams.Product> productList=new ArrayList<>();productList.add(QueryProductDetailsParams.Product.newBuilder().setProductId(ProductId).setProductType(ProductType).build());QueryProductDetailsParams params=QueryProductDetailsParams.newBuilder().setProductList(productList).build();billingClient.queryProductDetailsAsync(params,(billingResult,list)->{for(ProductDetails li:list){Log.d(TAG,"IN APP item Price"+Objects.requireNonNull(li.getOneTimePurchaseOfferDetails()).getFormattedPrice());if(Objects.equals(Position,"ProductId")){PUBLIC_CALLBACKS.success(li.getProductId());}else if(Objects.equals(Position,"Title")){PUBLIC_CALLBACKS.success(li.getTitle());}else if(Objects.equals(Position,"Description")){PUBLIC_CALLBACKS.success(li.getDescription());}else if(Objects.equals(Position,"item_Price")){PUBLIC_CALLBACKS.success(Objects.requireNonNull(li.getOneTimePurchaseOfferDetails()).getFormattedPrice());}else if(Objects.equals(Position,"Any")){PUBLIC_CALLBACKS.success(li.toString());}else{PUBLIC_CALLBACKS.success(li.toString());}}});}private void getPurchaseHistory(final CallbackContext PUBLIC_CALLBACKS){billingClient.queryPurchaseHistoryAsync(QueryPurchaseHistoryParams.newBuilder().setProductType(ProductType).build(),(billingResult,purchasesHistoryList)->{if(purchasesHistoryList!=null){for(PurchaseHistoryRecord purchase:purchasesHistoryList){if(Objects.equals(Position,"Purchase_Token")){PUBLIC_CALLBACKS.success(purchase.getPurchaseToken());}else if(Objects.equals(Position,"Original_Json")){PUBLIC_CALLBACKS.success(purchase.getOriginalJson());}else if(Objects.equals(Position,"Quantity")){PUBLIC_CALLBACKS.success(purchase.getQuantity());}else if(Objects.equals(Position,"Signature")){PUBLIC_CALLBACKS.success(purchase.getSignature());}else if(Objects.equals(Position,"Developer_Payload")){PUBLIC_CALLBACKS.success(purchase.getDeveloperPayload());}else if(Objects.equals(Position,"Products")){PUBLIC_CALLBACKS.success(purchase.getProducts().toString());}else if(Objects.equals(Position,"Purchase_Time")){PUBLIC_CALLBACKS.success((int)purchase.getPurchaseTime());}else if(Objects.equals(Position,"Any")){PUBLIC_CALLBACKS.success(purchasesHistoryList.toString());}else{PUBLIC_CALLBACKS.success(purchasesHistoryList.toString());}}}else{PUBLIC_CALLBACKS.error("purchases History List NULL");}});}private void restoreNonConsumable(CallbackContext PUBLIC_CALLBACKS){billingClient=BillingClient.newBuilder(cordova.getActivity()).enablePendingPurchases().setListener((billingResult,list)->{}).build();final BillingClient flinalBillingClient=billingClient;billingClient.startConnection(new BillingClientStateListener(){@Override public void onBillingServiceDisconnected(){establishConnection(PUBLIC_CALLBACKS);}@Override public void onBillingSetupFinished(@NonNull BillingResult billingResult){if(Objects.equals(ProductType,"Non-consumable")){if(billingResult.getResponseCode()==BillingClient.BillingResponseCode.OK){flinalBillingClient.queryPurchasesAsync(QueryPurchasesParams.newBuilder().setProductType(BillingClient.ProductType.INAPP).build(),(billingResult12,list)->{if(billingResult12.getResponseCode()==BillingClient.BillingResponseCode.OK){if(list.size()>0){for(int i=0;i<list.size();i++){if(Objects.equals(Position,"OrderId")){PUBLIC_CALLBACKS.success(list.get(i).getOrderId());}else if(Objects.equals(Position,"Purchase_Token")){PUBLIC_CALLBACKS.success(list.get(i).getPurchaseToken());}else if(Objects.equals(Position,"Package_Name")){PUBLIC_CALLBACKS.success(list.get(i).getPackageName());}else if(Objects.equals(Position,"Purchase_Time")){PUBLIC_CALLBACKS.success((int)list.get(i).getPurchaseTime());}else if(Objects.equals(Position,"Purchase_State")){PUBLIC_CALLBACKS.success(list.get(i).getPurchaseState());}else if(Objects.equals(Position,"Quantity")){PUBLIC_CALLBACKS.success(list.get(i).getQuantity());}else if(Objects.equals(Position,"Signature")){PUBLIC_CALLBACKS.success(list.get(i).getSignature());}else if(Objects.equals(Position,"Original_Json")){PUBLIC_CALLBACKS.success(list.get(i).getOriginalJson());}else if(Objects.equals(Position,"ProductId")){PUBLIC_CALLBACKS.success(list.get(i).getProducts().toString());}else if(Objects.equals(Position,"Any")){PUBLIC_CALLBACKS.success(list.toString());}else{PUBLIC_CALLBACKS.success(list.get(i).getOriginalJson());}}}}else{PUBLIC_CALLBACKS.success(billingResult.getResponseCode());}});}}if(Objects.equals(ProductType,"Subscriptions")){if(billingResult.getResponseCode()==BillingClient.BillingResponseCode.OK){flinalBillingClient.queryPurchasesAsync(QueryPurchasesParams.newBuilder().setProductType(BillingClient.ProductType.INAPP).build(),(billingResult12,list)->{if(billingResult12.getResponseCode()==BillingClient.BillingResponseCode.OK){if(list.size()>0){for(int i=0;i<list.size();i++){if(Objects.equals(Position,"OrderId")){PUBLIC_CALLBACKS.success(list.get(i).getOrderId());}else if(Objects.equals(Position,"Purchase_Token")){PUBLIC_CALLBACKS.success(list.get(i).getPurchaseToken());}else if(Objects.equals(Position,"Package_Name")){PUBLIC_CALLBACKS.success(list.get(i).getPackageName());}else if(Objects.equals(Position,"Purchase_Time")){PUBLIC_CALLBACKS.success((int)list.get(i).getPurchaseTime());}else if(Objects.equals(Position,"Purchase_State")){PUBLIC_CALLBACKS.success(list.get(i).getPurchaseState());}else if(Objects.equals(Position,"Quantity")){PUBLIC_CALLBACKS.success(list.get(i).getQuantity());}else if(Objects.equals(Position,"Signature")){PUBLIC_CALLBACKS.success(list.get(i).getSignature());}else if(Objects.equals(Position,"Original_Json")){PUBLIC_CALLBACKS.success(list.get(i).getOriginalJson());}else if(Objects.equals(Position,"ProductId")){PUBLIC_CALLBACKS.success(list.get(i).getProducts().toString());}else if(Objects.equals(Position,"Any")){PUBLIC_CALLBACKS.success(list.toString());}else{PUBLIC_CALLBACKS.success(list.get(i).getOriginalJson());}}}}else{PUBLIC_CALLBACKS.success(billingResult.getResponseCode());}});}}}});}void errorCallBack(BillingResult billingResult){PUBLIC_CALLBACKS.error(billingResult.getResponseCode());}public void onResume(boolean multitasking){billingClient.queryPurchasesAsync(QueryPurchasesParams.newBuilder().setProductType(BillingClient.ProductType.INAPP).build(),(billingResult,list)->{if(billingResult.getResponseCode()==BillingClient.BillingResponseCode.OK){for(Purchase purchase:list){if(purchase.getPurchaseState()==Purchase.PurchaseState.PURCHASED&&!purchase.isAcknowledged()){handlePurchaseNonConsumable(purchase,PUBLIC_CALLBACKS);}}}});billingClient.queryPurchasesAsync(QueryPurchasesParams.newBuilder().setProductType(BillingClient.ProductType.SUBS).build(),(billingResult,list)->{if(billingResult.getResponseCode()==BillingClient.BillingResponseCode.OK){for(Purchase purchase:list){if(purchase.getPurchaseState()==Purchase.PurchaseState.PURCHASED&&!purchase.isAcknowledged()){handlePurchaseNonConsumable(purchase,PUBLIC_CALLBACKS);}}}});super.onResume(multitasking);}@Override public void onDestroy(){if(billingClient!=null&&billingClient.isReady()){billingClient.endConnection();}super.onDestroy();}}